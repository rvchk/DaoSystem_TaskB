const contractABI = require("./abi/abi.json");
const { ethers } = require("ethers");
const { Web3 } = require("web3")

const web3 = new Web3("http://localhost:8545");
const provider = new ethers.JsonRpcProvider("http://localhost:8545");
const ownerAddress = "0xda82d8e188e355c380d77616B2b63b0267aA68eD";

const myContractName = "DaoSystem";
let contractAddress = '';
let lastProcessedEventId = null;
let contract = null;
let eventCount = 1;

// –ü–æ–∏—Å–∫ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
async function initializeContract() {
  const nonce = await provider.getTransactionCount(ownerAddress);

  if (nonce > 0) {
  contractAddress = ethers.getCreateAddress({
      from: ownerAddress,
      nonce: nonce - eventCount,
  });

  console.log("Contract found:", contractAddress);
  contract = new web3.eth.Contract(contractABI, contractAddress);
  return contract;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π ProposalCreated
async function fetchProposalEvents(contract, postFunc) {
  try {
    const events = await contract.getPastEvents("allEvents", {
      fromBlock: 0,
      toBlock: "latest",
    });
    events.shift()

    if (events.length > 0) {
      eventCount = events.length + 1;
    }

    for (const event of events) {
      const eventId = `${event.blockNumber}_${event.logIndex}`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
      if (!lastProcessedEventId || eventId > lastProcessedEventId) {
        console.log("üÜï New event detected:", event.event);
        handleEvent(event, postFunc)
        console.log(`–û—Ç–ø—Ä–∞–≤–∏–ª —ç—Ç–æ—Ç –∏–≤–µ–Ω—Ç = ${event.returnValues.id}`)

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID
        lastProcessedEventId = eventId;
      }
    }

    return events;
  } catch (error) {
    console.error("‚ùå Event fetching failed:", error.message);
  }
}

function serializeEventData(event) {
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º
  const eventData = {
      ...event.returnValues,
      event: event.event // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
  };

  return JSON.stringify(eventData, (key, value) => {
      if (typeof value === 'bigint') {
          return value.toString();
      }
      if (key === '__length__') {
          return undefined;
      }
      return value;
  });
}

async function handleEvent(event, postFunc) {
  if (event.event == "NewStartupInvestment") {
    await postFunc(myContractName, "org1", "admin", "createStartup", [event.returnValues.startup])
    await postFunc(myContractName, "org1", "admin", "distributeFundsInsideStartup", [event.returnValues.startup, event.returnValues.amount])
  }
  if (event.event == "StartupInvestment") {
    await postFunc(myContractName, "org1", "admin", "distributeFundsInsideStartup", [event.returnValues.startup, event.returnValues.amount])
  }
  console.log(event.returnValues)
  await postFunc(myContractName, "org1", "admin", "saveEvent", ['events', serializeEventData(event)])
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function monitorContract(postFunc) {
  if (!contract) {
    await initializeContract();
  }

  if (contract) {
    await fetchProposalEvents(contract, postFunc);
  }
}

module.exports = { initializeContract, monitorContract }